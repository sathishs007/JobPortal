package com.megatech.service;

import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.rowset.serial.SerialException;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.megatech.dao.AdminDao;
import com.megatech.exception.HeloclinicException;
import com.megatech.exception.JLogger;
import com.megatech.model.AdminLoginBO;
import com.megatech.model.CustomerBO;
import com.megatech.model.InvoiceCustomerBO;
import com.megatech.model.ServiceBO;
import com.megatech.model.SupplierBO;
import com.megatech.model.SupplierInvoiceBO;
import com.megatech.utils.ErrorCodes;
import com.megatech.utils.MegatechResourceBundle;
import com.megatech.utils.SendMail;
import com.megatech.utils.SuccessMsg;
import com.megatech.vo.AdminLoginVO;
import com.megatech.vo.CustomerVO;
import com.megatech.vo.InvoiceCustomerVO;
import com.megatech.vo.ServiceVO;
import com.megatech.vo.SupplierAllInvoiceVO;
import com.megatech.vo.SupplierInvoiceVO;
import com.megatech.vo.SupplierVO;

@Service("AdminService")
@Transactional
public class AdminServiceImpl implements AdminService {
	@Autowired
	private AdminDao dao;
	private static final JLogger LOGGER = JLogger
			.getLogger(AdminServiceImpl.class);

	@Override
	public AdminLoginBO authenticate(AdminLoginBO adminLoginBO)
			throws HeloclinicException {
		LOGGER.entry();
		AdminLoginBO loginBO = new AdminLoginBO();
		try {
			loginBO = dao.authenticate(adminLoginBO.getEmailAddress(),
					adminLoginBO.getPassword());
			if (loginBO.getStatus()) {
				loginBO.setResponse(SuccessMsg.PT_ACC_ACTIVATION);
			}
		} catch (HeloclinicException he) {
			loginBO.setErrorCode(he.getErrorCode());
			loginBO.setErrorMessage(he.getErrorMessage());
			LOGGER.debug(ErrorCodes.PT_LOG_FAIL + he);
		}
		LOGGER.exit();
		return loginBO;
	}

	@Override
	public boolean forgotPassword(AdminLoginBO loginBO)
			throws HeloclinicException {
		LOGGER.entry();
		boolean status = false;
		try {
			AdminLoginVO loginVO = dao.forgotPassword(loginBO);

			if (null != loginVO) {
				try {
					String str = MegatechResourceBundle
							.getValue("AdminChangePassword");
					SendMail sendMail = new SendMail();
					String toaddress = loginBO.getEmailAddress();
					String subject = "HelloClinic:Change Your Password for HelloClinic";
					String bodyContent = "Dear Member, "
							+ "\n\n\tClick here to change your forgotten password in HelloClinic:\n"
							+ str
							+ loginBO.getEmailAddress()
							+ "\n"
							+ "\n\n\n\n\nRegards,\n Customer Support,\n HelloClinic Customer Services.";
					sendMail.send(toaddress, subject, bodyContent);
					status = true;
				} catch (Exception ex) {
					LOGGER.debug(ex,
							"Change Password email to the Patient Failed!");
				}

			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return status;
	}

	@Override
	public boolean changePassword(AdminLoginBO adminLoginBO)
			throws HeloclinicException {
		LOGGER.entry();
		boolean passwordChange = false;
		AdminLoginVO adminLoginVO = new AdminLoginVO();
		try {
			if (null != adminLoginBO.getEmailAddress()
					&& null != adminLoginBO.getPassword()) {

				BeanUtils.copyProperties(adminLoginBO, adminLoginVO);

				adminLoginVO = dao.changePassword(adminLoginVO);
				if (null != adminLoginVO.getPassword()
						&& null != adminLoginVO.getEmailAddress()) {
					passwordChange = true;
				}
			}

		} catch (HeloclinicException he) {

		}
		LOGGER.exit();
		return passwordChange;
	}

	@Override
	public List<CustomerBO> allCustomer() throws IllegalAccessException,
			InvocationTargetException {
		List<CustomerBO> customerList = dao.allCustomer();
		return customerList;

	}

	@Override
	public boolean createCustomerInvoice(InvoiceCustomerBO invoiceCustomerBO)
			throws IllegalAccessException, InvocationTargetException {
		boolean isStatus = false;
		InvoiceCustomerVO vo = new InvoiceCustomerVO();
		vo.setAmount(invoiceCustomerBO.getAmount());
		vo.setDescription(invoiceCustomerBO.getDescription());
		CustomerVO customerVO = new CustomerVO();
		customerVO.setCustomerId(invoiceCustomerBO.getCustomerId());
		vo.setCustomerVO(customerVO);
		vo.setCreatedBy(invoiceCustomerBO.getCreatedBy());
		vo.setModifiedBy(invoiceCustomerBO.getModifiedBy());
		long id = dao.createCustomerInvoice(vo);
		if (0 != id) {
			isStatus = true;
		}
		return isStatus;

	}

	@Override
	public String supplierIdAutoGenerated() {
		return dao.supplierIdAutoGenerated();
	}

	@Override
	public boolean createSupplier(SupplierBO supplierBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			SupplierVO supplierVO = new SupplierVO();
			BeanUtils.copyProperties(supplierBO, supplierVO);
			String supplierId = dao.createSupplier(supplierVO);
			if (supplierId != null) {
				isStatus = true;
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return isStatus;
	}

	@Override
	public SupplierBO retrieveSuppliers() {
		LOGGER.entry();
		SupplierBO supplierBO = new SupplierBO();
		List<SupplierBO> supplierList = new ArrayList<SupplierBO>();
		try {
			supplierList = dao.retrieveSuppliers();
			if (supplierList.size() != 0) {
				supplierBO.setAllSupplierBOList(supplierList);
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return supplierBO;
	}

	@Override
	public boolean editSupplier(SupplierBO supplierBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			SupplierVO supplierVO = new SupplierVO();
			BeanUtils.copyProperties(supplierBO, supplierVO);
			supplierVO.setSupplierId(supplierBO.getSupplierId());
			supplierVO.setIsDeleted(supplierBO.getIsDeleted());
			supplierBO = dao.editSupplier(supplierVO);
			if (null == supplierBO.getErrorCode()) {
				isStatus = true;
			}
		} catch (Exception e) {

		}

		LOGGER.exit();
		return isStatus;
	}

	@Override
	public SupplierBO deleteSupplier(SupplierBO supplierBO) {
		SupplierVO supplierVO = new SupplierVO();
		try {
			supplierVO.setSupplierId(supplierBO.getSupplierId());
			supplierVO.setIsDeleted(supplierBO.getIsDeleted());
			supplierVO.setModified(supplierBO.getModified());
			supplierVO.setModifiedBy(supplierBO.getModifiedBy());
			int result = dao.deleteSupplier(supplierVO);
			if (result != 0) {
				supplierBO.setResponse(SuccessMsg.DELETE_SUCCESS);
			}
		} catch (HeloclinicException he) {
			supplierBO.setErrorCode(he.getErrorCode());
			supplierBO.setErrorMessage(he.getErrorMessage());
			LOGGER.debug(ErrorCodes.PT_LOG_FAIL + he);
		}
		return supplierBO;
	}

	@Override
	public List<InvoiceCustomerBO> retrieveCustomerInvoice() {
		return dao.retrieveCustomerInvoice();

	}

	@Override
	public SupplierInvoiceBO retrieveSupplierInvoice(
			SupplierInvoiceBO supplierInvoiceBO) {
		SupplierInvoiceBO invoiceBO = new SupplierInvoiceBO();
		List<SupplierInvoiceBO> invoiceBOList = dao
				.retrieveSupplierInvoice(supplierInvoiceBO);
		if (invoiceBOList.size() != 0 && invoiceBOList != null) {
			invoiceBO.setAllSupplierInvoiceBOList(invoiceBOList);
		}
		return invoiceBO;

	}

	@Override
	public boolean editCustomer(CustomerBO customerBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			CustomerVO customerVO = new CustomerVO();
			BeanUtils.copyProperties(customerBO, customerVO);
			customerVO.setCustomerId(customerBO.getCustomerId());
			customerVO.setIsDeleted(customerBO.getIsDeleted());
			customerBO = dao.editCustomer(customerVO);
			if (null == customerBO.getErrorCode()) {
				isStatus = true;
			}
		} catch (Exception e) {

		}

		LOGGER.exit();
		return isStatus;
	}

	@Override
	public CustomerBO retrieveCustomers() {
		LOGGER.entry();
		CustomerBO customerBO = new CustomerBO();
		List<CustomerBO> customerList = new ArrayList<CustomerBO>();
		try {
			customerList = dao.retrieveCustomers();
			if (customerList.size() != 0) {
				customerBO.setAllCustomerBOList(customerList);
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return customerBO;
	}

	@Override
	public CustomerBO deleteCustomer(CustomerBO customerBO) {
		CustomerVO customerVO = new CustomerVO();
		try {
			System.out.println("inside the service delete....");
			customerVO.setCustomerId(customerBO.getCustomerId());
			customerVO.setIsDeleted(customerBO.getIsDeleted());
			customerVO.setModified(customerBO.getModified());
			customerVO.setModifiedBy(customerBO.getModifiedBy());
			int result = dao.deleteCustomer(customerVO);
			if (result != 0) {
				customerBO.setResponse(SuccessMsg.DELETE_SUCCESS);
			}
		} catch (HeloclinicException he) {
			customerBO.setErrorCode(he.getErrorCode());
			customerBO.setErrorMessage(he.getErrorMessage());
			LOGGER.debug(ErrorCodes.PT_LOG_FAIL + he);
		}
		return customerBO;
	}

	@Override
	public boolean createCustomer(CustomerBO customerBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			CustomerVO customerVO = new CustomerVO();
			BeanUtils.copyProperties(customerBO, customerVO);
			String customerId = dao.createCustomer(customerVO);
			if (customerId != null) {
				isStatus = true;
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return isStatus;
	}

	@Override
	public String customerIdAutoGenerated() {
		return dao.customerIdAutoGenerated();
	}

	@Override
	public boolean createSupplierInvoice(SupplierInvoiceBO supplierInvoiceBO) {
		LOGGER.entry();
		boolean isStatus = false;
		SupplierInvoiceVO invoiceVO = new SupplierInvoiceVO();
		try {
			invoiceVO.setInvoiceAmount(supplierInvoiceBO.getInvoiceAmount());
			invoiceVO.setIsDeleted(supplierInvoiceBO.getIsDeleted());
			invoiceVO.setInvoiceDate(supplierInvoiceBO.getInvoiceDate());
			invoiceVO.setInvoiceNumber(supplierInvoiceBO.getInvoiceNumber());
			invoiceVO.setQuantity(supplierInvoiceBO.getQuantity());
			invoiceVO.setDescription(supplierInvoiceBO.getDescription());
			SupplierVO supplierVO = new SupplierVO();
			supplierVO.setSupplierId(supplierInvoiceBO.getSupplierId());
			invoiceVO.setSupplierVO(supplierVO);
			invoiceVO.setCreatedBy(supplierInvoiceBO.getCreatedBy());
			invoiceVO.setModifiedBy(supplierInvoiceBO.getModifiedBy());
			long id = dao.createSupplierInvoice(invoiceVO);
			if (0 != id) {
				isStatus = true;
			}
		} catch (HeloclinicException he) {

		}
		LOGGER.exit();
		return isStatus;
	}

	@Override
	public SupplierInvoiceBO deleteSupplierInvoiceItems(
			SupplierInvoiceBO supplierBO) {
		SupplierInvoiceVO supplierVO = new SupplierInvoiceVO();
		try {
			supplierVO.setId(supplierBO.getId());
			supplierVO.setIsDeleted(supplierBO.getIsDeleted());
			supplierVO.setModified(supplierBO.getModified());
			supplierVO.setModifiedBy(supplierBO.getModifiedBy());
			int result = dao.deleteSupplierInvoiceItems(supplierVO);
			if (result != 0) {
				supplierBO.setResponse(SuccessMsg.DELETE_SUCCESS);
			}
		} catch (HeloclinicException he) {
			supplierBO.setErrorCode(he.getErrorCode());
			supplierBO.setErrorMessage(he.getErrorMessage());
			LOGGER.debug(ErrorCodes.PT_LOG_FAIL + he);
		}
		return supplierBO;
	}

	@Override
	public boolean editSupplierInvoiceItems(SupplierInvoiceBO supplierInvoiceBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			SupplierInvoiceVO invoiceVO = new SupplierInvoiceVO();
			invoiceVO.setInvoiceAmount(supplierInvoiceBO.getInvoiceAmount());
			invoiceVO.setIsDeleted(supplierInvoiceBO.getIsDeleted());
			invoiceVO.setInvoiceDate(supplierInvoiceBO.getInvoiceDate());
			invoiceVO.setInvoiceNumber(supplierInvoiceBO.getInvoiceNumber());
			invoiceVO.setQuantity(supplierInvoiceBO.getQuantity());
			invoiceVO.setDescription(supplierInvoiceBO.getDescription());
			SupplierVO supplierVO = new SupplierVO();
			supplierVO.setSupplierId(supplierInvoiceBO.getSupplierId());
			invoiceVO.setSupplierVO(supplierVO);
			invoiceVO.setCreatedBy(supplierInvoiceBO.getCreatedBy());
			invoiceVO.setModifiedBy(supplierInvoiceBO.getModifiedBy());
			invoiceVO.setId(supplierInvoiceBO.getId());
			supplierInvoiceBO = dao.editSupplierInvoiceItems(invoiceVO);
			if (null == supplierInvoiceBO.getErrorCode()) {
				isStatus = true;
			}
		} catch (Exception e) {

		}

		LOGGER.exit();
		return isStatus;
	}

	@Override
	public boolean createSupplierAllInvoice(SupplierInvoiceBO supplierInvoiceBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			SupplierAllInvoiceVO invoiceVO = new SupplierAllInvoiceVO();
			invoiceVO.setInvoiceAmount(supplierInvoiceBO.getTotal());
			invoiceVO.setIsDeleted(supplierInvoiceBO.getIsDeleted());
			invoiceVO.setInvoiceDate(supplierInvoiceBO.getInvoiceDate());
			invoiceVO.setInvoiceNumber(supplierInvoiceBO.getInvoiceNumber());
			SupplierVO supplierVO = new SupplierVO();
			supplierVO.setSupplierId(supplierInvoiceBO.getSupplierId());
			invoiceVO.setSupplierVO(supplierVO);
			invoiceVO.setCreatedBy(supplierInvoiceBO.getCreatedBy());
			invoiceVO.setModifiedBy(supplierInvoiceBO.getModifiedBy());
			invoiceVO.setId(supplierInvoiceBO.getId());
			long id = dao.createSupplierAllInvoice(invoiceVO);
			if (0 != id) {
				isStatus = true;
			}
		} catch (HeloclinicException he) {

		}
		LOGGER.exit();
		return isStatus;
	}

	@Override
	public List<SupplierInvoiceBO> retrieveAllSupplierInvoice() {
		return dao.retrieveAllSupplierInvoice();

	}

	@Override
	public boolean updateSupplierAllInvoice(SupplierInvoiceBO supplierInvoiceBO) {
		LOGGER.entry();
		boolean isStatus = false;
		try {
			SupplierAllInvoiceVO invoiceVO = new SupplierAllInvoiceVO();
			invoiceVO.setInvoiceAmount(supplierInvoiceBO.getTotal());
			invoiceVO.setIsDeleted(supplierInvoiceBO.getIsDeleted());
			invoiceVO.setInvoiceDate(supplierInvoiceBO.getInvoiceDate());
			invoiceVO.setInvoiceNumber(supplierInvoiceBO.getInvoiceNumber());
			SupplierVO supplierVO = new SupplierVO();
			supplierVO.setSupplierId(supplierInvoiceBO.getSupplierId());
			invoiceVO.setSupplierVO(supplierVO);
			invoiceVO.setCreatedBy(supplierInvoiceBO.getCreatedBy());
			invoiceVO.setModifiedBy(supplierInvoiceBO.getModifiedBy());
			invoiceVO.setId(supplierInvoiceBO.getId());
			SupplierInvoiceBO supplierInvoiceBO2 = dao
					.updateAllSupplierInvoices(invoiceVO);
			if (null == supplierInvoiceBO2.getErrorCode()) {
				isStatus = true;
			}
		} catch (Exception e) {

		}

		LOGGER.exit();
		return isStatus;
	}

	// This method is used for mobile service only
	@Override
	public ServiceBO retrieveService() throws SerialException, SQLException {
		LOGGER.entry();
		ServiceBO serviceBO = new ServiceBO();
		List<ServiceBO> serviceList = new ArrayList<ServiceBO>();
		try {
			serviceList = dao.retrieveService();
			if (serviceList.size() != 0) {
				serviceBO.setAllServiceBOList(serviceList);
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return serviceBO;
	}

	// This method is used for mobile service only
	@Override
	public ServiceBO searchService(String searchParam) throws SerialException,
			SQLException {
		LOGGER.entry();
		ServiceBO serviceBO = new ServiceBO();
		List<ServiceBO> serviceList = new ArrayList<ServiceBO>();
		try {
			serviceList = dao.searchService(searchParam);
			if (serviceList.size() != 0) {
				serviceBO.setAllServiceBOList(serviceList);
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return serviceBO;
	}

	// This method is used for mobile service only
	@Override
	public ServiceBO searchReport(String searchParam) throws SerialException,
			SQLException {
		LOGGER.entry();
		ServiceBO serviceBO = new ServiceBO();
		List<ServiceBO> serviceList = new ArrayList<ServiceBO>();
		try {
			serviceList = dao.searchReport(searchParam);
			if (serviceList.size() != 0) {
				serviceBO.setAllServiceBOList(serviceList);
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return serviceBO;
	}

	@Override
	public boolean addService(ServiceBO serviceBO) throws HeloclinicException {
		boolean isStatus = false;
		try {
			ServiceVO serviceVO = new ServiceVO();
			BeanUtils.copyProperties(serviceBO, serviceVO);
			CustomerVO customerVO = new CustomerVO();
			customerVO.setCustomerId(serviceBO.getCustomerBO().getCustomerId());
			serviceVO.setCustomerVO(customerVO);
			long id = dao.addService(serviceVO);
			if (id != 0) {
				isStatus = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return isStatus;
	}
	
	@Override
	public boolean checkCustomerName(String customerName) {
		LOGGER.entry();
		boolean isStatus=false;
		List<CustomerBO> customerList = new ArrayList<CustomerBO>();
		try {
			customerList = dao.checkCustomerName(customerName);
			if (customerList.size() == 0) {
				isStatus=true;
			}
		} catch (HeloclinicException he) {

		}

		LOGGER.exit();
		return isStatus;
	}
}
